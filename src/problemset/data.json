[
    {
        "difficulty": "MEDIUM",
        "raw_tags": "['combinatorics', 'math']",
        "name": null,
        "source": "codeforces",
        "tags": "['Combinatorics', 'Mathematics']",
        "skill_types": "[]",
        "url": "https://codeforces.com/problemset/problem/630/H",
        "Expected Auxiliary Space": null,
        "Expected Time Complexity": null,
        "time_limit": null,
        "date": "2019-12-31",
        "picture_num": null,
        "memory_limit": null,
        "question": {
            "Description": "The city park of IT City contains n east to west paths and n north to south paths. Each east to west path crosses each north to south path, so there are n^2 intersections.\n\nThe city funded purchase of five benches. To make it seems that there are many benches it was decided to place them on as many paths as possible. Obviously this requirement is satisfied by the following scheme: each bench is placed on a cross of paths and each path contains not more than one bench.\n\nHelp the park administration count the number of ways to place the benches.",
            "Input": "The only line of the input contains one integer n (5 ≤ n ≤ 100) — the number of east to west paths and north to south paths.",
            "Output": "Output one integer — the number of ways to place the benches.",
            "Examples": [
                {
                    "input": "5",
                    "output": "120"
                }
            ],
            "Note": ""
        },
        
        "solutions": [
            {
                "code": "import math\nn = int(input())\nprint(math.perm(n, 5))",
                "language": "python",
                "solutionNumber": 1
            },
            {
                "code": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    int res = 1;\n    for(int i = 0; i < 5; ++i) res *= (n - i);\n    cout << res << endl;\n    return 0;\n}",
                "language": "cpp",
                "solutionNumber": 2
            },
            {
                "code": "const prompt = require('prompt-sync')();\nlet n = parseInt(prompt());\nlet res = 1;\nfor (let i = 0; i < 5; i++) {\n    res *= (n - i);\n}\nconsole.log(res);",
                "language": "javascript",
                "solutionNumber": 3
            },
            {
                "code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int res = 1;\n        for (int i = 0; i < 5; i++) {\n            res *= (n - i);\n        }\n        System.out.println(res);\n    }\n}",
                "language": "java",
                "solutionNumber": 4
            }
        ]
    },
    {
        "difficulty": "VERY_HARD",
        "raw_tags": "['data structures', 'binary search', 'dp', 'two pointers', 'divide and conquer']",
        "name": null,
        "source": "codeforces",
        "tags": "['Sorting', 'Amortized analysis', 'Dynamic programming', 'Divide and conquer', 'Data structures']",
        "skill_types": "['Dynamic programming', 'Data structures', 'Sorting', 'Amortized analysis']",
        "url": "https://codeforces.com/problemset/problem/1428/F",
        "Expected Auxiliary Space": null,
        "Expected Time Complexity": null,
        "time_limit": "2 seconds",
        "date": "2020-10-17",
        "picture_num": "0",
        "memory_limit": "256 megabytes",
        "question": {
            "Description": "Zookeeper is buying a carton of fruit to feed his pet wabbit. The fruits are a sequence of apples and oranges, which is represented by a binary string $s_1s_2\\ldots s_n$ of length $n$. $1$ represents an apple and $0$ represents an orange.\n\nSince wabbit is allergic to eating oranges, Zookeeper would like to find the longest contiguous sequence of apples. Let $f(l,r)$ be the longest contiguous sequence of apples in the substring $s_{l}s_{l+1}\\ldots s_{r}$. \n\nHelp Zookeeper find $\\sum_{l=1}^{n} \\sum_{r=l}^{n} f(l,r)$, or the sum of $f$ across all substrings.",
            "Input": "The first line contains a single integer $n$ $(1 \\leq n \\leq 5 \\cdot 10^5)$.\n\n The next line contains a binary string $s$ of length $n$ $(s_i \\in \\{0,1\\})$",
            "Output": "Print a single integer: $\\sum_{l=1}^{n} \\sum_{r=l}^{n} f(l,r)$.",
            "Examples": [
                {
                    "input": "4\n0110",
                    "output": "12"
                },
                {
                    "input": "7\n1101001",
                    "output": "30"
                },
                {
                    "input": "12\n011100011100",
                    "output": "156"
                }
            ],
            "Note": "In the first test, there are ten substrings. The list of them (we let $[l,r]$ be the substring $s_l s_{l+1} \\ldots s_r$):  $[1,1]$: 0  $[1,2]$: 01  $[1,3]$: 011  $[1,4]$: 0110  $[2,2]$: 1  $[2,3]$: 11  $[2,4]$: 110  $[3,3]$: 1  $[3,4]$: 10  $[4,4]$: 0 \n\nThe lengths of the longest contiguous sequence of ones in each of these ten substrings are $0,1,2,2,1,2,2,1,1,0$ respectively. Hence, the answer is $0+1+2+2+1+2+2+1+1+0 = 12$."
        },
        "solutions":[
            {
                "code": "n = int(input())\ns = input()\n\nres = 0\nfor i in range(n):\n    max_len = 0\n    count = 0\n    for j in range(i, n):\n        if s[j] == '1':\n            count += 1\n            max_len = max(max_len, count)\n        else:\n            count = 0\n        res += max_len\nprint(res)",
                "language": "python",
                "solutionNumber": 1
            },
            {
                "code": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    int n;\n    string s;\n    cin >> n >> s;\n    long long res = 0;\n    for (int i = 0; i < n; ++i) {\n        int max_len = 0, count = 0;\n        for (int j = i; j < n; ++j) {\n            if (s[j] == '1') count++;\n            else count = 0;\n            max_len = max(max_len, count);\n            res += max_len;\n        }\n    }\n    cout << res << endl;\n    return 0;\n}",
                "language": "cpp",
                "solutionNumber": 2
            },
            {
                "code": "const readline = require('readline');\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\n\nlet input = [];\nrl.on('line', line => input.push(line)).on('close', () => {\n    const n = parseInt(input[0]);\n    const s = input[1];\n    let res = 0;\n    for (let i = 0; i < n; i++) {\n        let count = 0, maxLen = 0;\n        for (let j = i; j < n; j++) {\n            if (s[j] === '1') count++;\n            else count = 0;\n            maxLen = Math.max(maxLen, count);\n            res += maxLen;\n        }\n    }\n    console.log(res);\n});",
                "language": "javascript",
                "solutionNumber": 3
            },
            {
                "code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        String s = sc.next();\n        long res = 0;\n        for (int i = 0; i < n; i++) {\n            int count = 0, maxLen = 0;\n            for (int j = i; j < n; j++) {\n                if (s.charAt(j) == '1') count++;\n                else count = 0;\n                maxLen = Math.max(maxLen, count);\n                res += maxLen;\n            }\n        }\n        System.out.println(res);\n    }\n}",
                "language": "java",
                "solutionNumber": 4
            }
        ]
    },
    {
        "difficulty": "EASY",
        "raw_tags": "['math', 'dp', 'constructive algorithms']",
        "name": null,
        "source": "codeforces",
        "tags": "['Dynamic programming', 'Mathematics', 'Constructive algorithms']",
        "skill_types": "['Dynamic programming']",
        "url": "https://codeforces.com/problemset/problem/1713/C",
        "Expected Auxiliary Space": null,
        "Expected Time Complexity": null,
        "time_limit": "1 second",
        "date": "2022-08-06",
        "picture_num": "0",
        "memory_limit": "256 megabytes",
        "question":{
            "Description": "A $\\mathbf{0}$-indexed array $a$ of size $n$ is called good if for all valid indices $i$ ($0 \\le i \\le n-1$), $a_i + i$ is a perfect square$^\\dagger$.\n\nGiven an integer $n$. Find a permutation$^\\ddagger$ $p$ of $[0,1,2,\\ldots,n-1]$ that is good or determine that no such permutation exists.\n\n$^\\dagger$ An integer $x$ is said to be a perfect square if there exists an integer $y$ such that $x = y^2$.\n\n$^\\ddagger$ An array $b$ is a permutation of an array $a$ if $b$ consists of the elements of $a$ in arbitrary order. For example, $[4,2,3,4]$ is a permutation of $[3,2,4,4]$ while $[1,2,2]$ is not a permutation of $[1,2,3]$.",
            "Input": "The first line contains a single integer $t$ ($1 \\le t \\le 10^4$) — the number of test cases.\n\nThe only line of each test case contains a single integer $n$ ($1 \\le n \\le 10^5$) — the length of the permutation $p$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.",
            "Output": "For each test case, output $n$ distinct integers $p_0, p_1, \\dots, p_{n-1}$ ($0 \\le p_i \\le n-1$) — the permutation $p$ — if the answer exists, and $-1$ otherwise.",
            "Examples": [
                {
                    "input": "3\n3\n4\n7",
                    "output": "1 0 2\n0 3 2 1\n1 0 2 6 5 4 3"
                }
            ],
            "Note": "In the first test case, we have $n=3$. The array $p = [1, 0, 2]$ is good since $1 + 0 = 1^2$, $0 + 1 = 1^2$, and $2 + 2 = 2^2$\n\nIn the second test case, we have $n=4$. The array $p = [0, 3, 2, 1]$ is good since $0 + 0 = 0^2$, $3 + 1 = 2^2$, $2+2 = 2^2$, and $1+3 = 2^2$."
        },
        "solutions":[
              {
                "code": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    res = [-1] * n\n    used = [False] * n\n    i = n - 1\n    while i >= 0:\n        sq = int((i + i)**0.5)\n        while sq * sq > 2 * i:\n            sq -= 1\n        j = sq * sq - i\n        if j < 0 or j > i:\n            print(-1)\n            break\n        for k in range(j, i + 1):\n            res[k] = j + i - k\n        i = j - 1\n    else:\n        print(' '.join(map(str, res)))",
                "language": "python",
                "solutionNumber": 1
              },
              {
                "code": "#include <iostream>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\nint main() {\n    int t;\n    cin >> t;\n    while (t--) {\n        int n;\n        cin >> n;\n        vector<int> res(n, -1);\n        int i = n - 1;\n        while (i >= 0) {\n            int sq = sqrt(2 * i);\n            while (sq * sq > 2 * i) sq--;\n            int j = sq * sq - i;\n            if (j < 0 || j > i) {\n                cout << -1 << endl;\n                goto next;\n            }\n            for (int k = j; k <= i; ++k)\n                res[k] = j + i - k;\n            i = j - 1;\n        }\n        for (int x : res) cout << x << \" \";\n        cout << endl;\n    next:;\n    }\n    return 0;\n}",
                "language": "cpp",
                "solutionNumber": 2
              },
              {
                "code": "const readline = require('readline');\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\nlet input = [];\nrl.on('line', line => input.push(line));\nrl.on('close', () => {\n    let t = parseInt(input[0]);\n    let idx = 1;\n    while (t--) {\n        let n = parseInt(input[idx++]);\n        let res = Array(n).fill(-1);\n        let i = n - 1;\n        let failed = false;\n        while (i >= 0) {\n            let sq = Math.floor(Math.sqrt(2 * i));\n            while (sq * sq > 2 * i) sq--;\n            let j = sq * sq - i;\n            if (j < 0 || j > i) {\n                console.log(-1);\n                failed = true;\n                break;\n            }\n            for (let k = j; k <= i; ++k) {\n                res[k] = j + i - k;\n            }\n            i = j - 1;\n        }\n        if (!failed) console.log(res.join(' '));\n    }\n});",
                "language": "javascript",
                "solutionNumber": 3
              },
              {
                "code": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        while (t-- > 0) {\n            int n = sc.nextInt();\n            int[] res = new int[n];\n            Arrays.fill(res, -1);\n            int i = n - 1;\n            boolean ok = true;\n            while (i >= 0) {\n                int sq = (int) Math.sqrt(2 * i);\n                while (sq * sq > 2 * i) sq--;\n                int j = sq * sq - i;\n                if (j < 0 || j > i) {\n                    System.out.println(-1);\n                    ok = false;\n                    break;\n                }\n                for (int k = j; k <= i; k++)\n                    res[k] = j + i - k;\n                i = j - 1;\n            }\n            if (ok) {\n                for (int k = 0; k < n; k++)\n                    System.out.print(res[k] + \" \");\n                System.out.println();\n            }\n        }\n    }\n}",
                "language": "java",
                "solutionNumber": 4
              }
        ]
    }
]